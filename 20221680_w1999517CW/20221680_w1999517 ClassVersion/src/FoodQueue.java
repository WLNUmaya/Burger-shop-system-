
import java.util.ArrayList;

class FoodQueue {
    private ArrayList<Customer> customers; // ArrayList to store the customers in the queue
    private int capacity; // Maximum capacity of the queue

    // Constructor to initialize the FoodQueue object with the provided capacity
    public FoodQueue(int capacity) {
        this.capacity = capacity;
        this.customers = new ArrayList<>(capacity);
    }

    // Method to get the current size of the queue (number of customers)
    public int getSize() {
        return customers.size();
    }

    // Method to get the capacity of the queue
    public int getCapacity() {
        return capacity;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return customers.isEmpty();
    }

    // Method to check if the queue is full
    public boolean isFull() {
        return customers.size() == capacity;
    }

    // Method to get the list of customers in the queue
    public ArrayList<Customer> getCustomers() {
        return customers;
    }

    // Method to get the cashier number associated with the queue
    public int getCashierNumber() {
        if (this == Manager.cashier1) {
            return 1;
        } else if (this == Manager.cashier2) {
            return 2;
        } else if (this == Manager.cashier3) {
            return 3;
        } else {
            return -1;
        }
    }

    // Method to add a customer to the queue if it is not full
    public void addCustomer(Customer customer) {
        if (!isFull()) {
            customers.add(customer);
        }
    }

    // Method to remove a customer from the queue at the specified index
    public Customer removeCustomer(int index) {
        if (isValidIndex(index)) {
            return customers.remove(index);
        }
        return null;
    }

    // Method to check if the provided index is valid within the range of the queue
    public boolean isValidIndex(int index) {
        return index >= 0 && index < customers.size();
    }

    // Method to calculate the total income generated by the customers in the queue based on the burger price
    public double getIncome(double burgerPrice) {
        double income = 0.0;
        for (Customer customer : customers) {
            income += customer.getBurgersRequired() * burgerPrice;
        }
        return income;
    }

    // Method to get a formatted string representation of the customer data in the queue
    public String getDataString(String prefix) {
        StringBuilder sb = new StringBuilder();
        for (Customer customer : customers) {
            sb.append(prefix).append(customer.getFullName()).append(":").append(customer.getBurgersRequired()).append("\n");
        }
        return sb.toString();
    }

    // Override the toString() method to get a string representation of the queue's occupancy status
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < capacity; i++) {
            if (i < customers.size()) {
                sb.append("O"); // O represents an occupied position in the queue
            } else {
                sb.append("X"); // X represents an unoccupied position in the queue
            }
            if (i != capacity - 1) {
                sb.append(" ");
            }
        }
        return sb.toString();
    }
}
